// React
import { useRef, useEffect, useState } from 'react';

// ÂÜÖÈÉ®„É¢„Ç∏„É•„Éº„É´
import Header from "../../components/common/Header/Header";
import FooterNav from "../../components/common/FooterNav/FooterNav";
import { showWalkthroughEvent } from "../../utils/walkthroughEvents";

// „Ç¢„Çª„ÉÉ„Éà
import mapImage from "../../assets/images/map.png";
import ProgramImage from "../../assets/images/program.png";

// CSS
import styles from "./MapPage.module.css";

interface ZoomedMapOverlayProps {
  imageSrc: string; 
  imageAlt: string; 
  onClose: () => void;
}

const ZoomedMapOverlay: React.FC<ZoomedMapOverlayProps> = ({ imageSrc, imageAlt, onClose }) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const imageRef = useRef<HTMLImageElement>(null);
  const [scale, setScale] = useState(1);
  const [position, setPosition] = useState({ x: 0, y: 0 });
  const [isDragging, setIsDragging] = useState(false);
  const [startPos, setStartPos] = useState({ x: 0, y: 0 });
  
  // „Éî„É≥„ÉÅ„Ç∫„Éº„É†Áî®„ÅÆÁä∂ÊÖã
  const lastTouchDistance = useRef<number | null>(null);
  const lastScale = useRef(1);

  // „Çø„ÉÉ„ÉÅÈñì„ÅÆË∑ùÈõ¢„ÇíË®àÁÆó
  const getTouchDistance = (touch1: React.Touch, touch2: React.Touch) => {
    const dx = touch1.clientX - touch2.clientX;
    const dy = touch1.clientY - touch2.clientY;
    return Math.sqrt(dx * dx + dy * dy);
  };

  // „Éî„É≥„ÉÅ„Ç∫„Éº„É†ÈñãÂßã
  const handleTouchStart = (e: React.TouchEvent) => {
    if (e.touches.length === 2) {
      e.preventDefault();
      const distance = getTouchDistance(e.touches[0], e.touches[1]);
      lastTouchDistance.current = distance;
      lastScale.current = scale;
    } else if (e.touches.length === 1 && scale > 1) {
      setIsDragging(true);
      setStartPos({
        x: e.touches[0].clientX - position.x,
        y: e.touches[0].clientY - position.y,
      });
    }
  };

  // „Éî„É≥„ÉÅ„Ç∫„Éº„É†‰∏≠
  const handleTouchMove = (e: React.TouchEvent) => {
    if (e.touches.length === 2 && lastTouchDistance.current) {
      e.preventDefault();
      const distance = getTouchDistance(e.touches[0], e.touches[1]);
      const ratio = distance / lastTouchDistance.current;
      const newScale = Math.min(Math.max(1, lastScale.current * ratio), 4);
      setScale(newScale);
    } else if (e.touches.length === 1 && isDragging && scale > 1) {
      e.preventDefault();
      setPosition({
        x: e.touches[0].clientX - startPos.x,
        y: e.touches[0].clientY - startPos.y,
      });
    }
  };

  // „Éî„É≥„ÉÅ„Ç∫„Éº„É†ÁµÇ‰∫Ü
  const handleTouchEnd = (e: React.TouchEvent) => {
    if (e.touches.length < 2) {
      lastTouchDistance.current = null;
    }
    if (e.touches.length === 0) {
      setIsDragging(false);
      // „Çπ„Ç±„Éº„É´„Åå1„ÅÆÂ†¥Âêà„ÄÅ‰ΩçÁΩÆ„Çí„É™„Çª„ÉÉ„Éà
      if (scale <= 1) {
        setPosition({ x: 0, y: 0 });
      }
    }
  };

  // „Éû„Ç¶„Çπ„Ç§„Éô„É≥„ÉàÔºàPCÁî®Ôºâ
  const handleMouseDown = (e: React.MouseEvent) => {
    if (scale > 1) {
      setIsDragging(true);
      setStartPos({
        x: e.clientX - position.x,
        y: e.clientY - position.y,
      });
    }
  };

  const handleMouseMove = (e: React.MouseEvent) => {
    if (isDragging && scale > 1) {
      setPosition({
        x: e.clientX - startPos.x,
        y: e.clientY - startPos.y,
      });
    }
  };

  const handleMouseUp = () => {
    setIsDragging(false);
  };

  // „Éõ„Ç§„Éº„É´„Ç∫„Éº„É†ÔºàPCÁî®Ôºâ
  const handleWheel = (e: React.WheelEvent) => {
    e.preventDefault();
    const delta = e.deltaY > 0 ? 0.9 : 1.1;
    const newScale = Math.min(Math.max(1, scale * delta), 4);
    setScale(newScale);
    
    if (newScale <= 1) {
      setPosition({ x: 0, y: 0 });
    }
  };

  // „ÉÄ„Éñ„É´„Çø„ÉÉ„Éó„Åß„Ç∫„Éº„É†
  const lastTap = useRef<number>(0);
  const handleDoubleTap = () => {
    const now = Date.now();
    const DOUBLE_TAP_DELAY = 300;
    
    if (now - lastTap.current < DOUBLE_TAP_DELAY) {
      if (scale > 1) {
        setScale(1);
        setPosition({ x: 0, y: 0 });
      } else {
        setScale(2);
      }
    }
    lastTap.current = now;
  };

  return (
    <div className={styles.zoomedOverlay} onClick={onClose}>
      <button 
        type="button" 
        className={styles.closeButton} 
        onClick={onClose} 
        aria-label={`${imageAlt}„ÇíÈñâ„Åò„Çã`}
      >
        &times;
      </button>
      
      <div 
        className={styles.zoomedMapContainer} 
        ref={containerRef}
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onMouseLeave={handleMouseUp}
        onWheel={handleWheel}
        onClick={(e) => {
          e.stopPropagation();
          handleDoubleTap();
        }}
      >
        <img
          ref={imageRef}
          src={imageSrc}
          alt={imageAlt}
          className={styles.zoomedMapImage}
          style={{
            transform: `scale(${scale}) translate(${position.x / scale}px, ${position.y / scale}px)`,
            transformOrigin: 'center center',
            transition: isDragging ? 'none' : 'transform 0.2s ease-out',
            cursor: scale > 1 ? (isDragging ? 'grabbing' : 'grab') : 'default',
          }}
          draggable={false}
        />
      </div>
      
      {scale > 1 && (
        <div className={styles.zoomIndicator}>
          {Math.round(scale * 100)}%
        </div>
      )}
    </div>
  );
};

const MapPage: React.FC = () => {
  const [isMapZoomed, setIsMapZoomed] = useState(false);
  const [isProgramZoomed, setIsProgramZoomed] = useState(false);
  const [showResetConfirm, setShowResetConfirm] = useState(false);
  const [showCameraHelp, setShowCameraHelp] = useState(false);
  const [cameraPermission, setCameraPermission] = useState<'granted' | 'denied' | 'prompt' | 'unknown'>('unknown');

  const mapContainerRef = useRef<HTMLDivElement>(null);

  const handleMapClick = () => {
    setIsMapZoomed(true);
  };

  const handleProgramClick = () => {
    setIsProgramZoomed(true);
  };
  
  const handleCloseZoom = () => {
    setIsMapZoomed(false);
    setIsProgramZoomed(false);
  };

  const handleShowWalkthrough = () => {
    showWalkthroughEvent();
  };

  const handleResetData = () => {
    setShowResetConfirm(true);
  };

  const handleConfirmReset = () => {
    // LocalStorage„ÅÆ„Éá„Éº„Çø„Çí„ÇØ„É™„Ç¢
    localStorage.clear();
    
    // „Éö„Éº„Ç∏„Çí„É™„É≠„Éº„Éâ„Åó„Å¶ÂàùÊúüÁä∂ÊÖã„Å´Êàª„Åô
    window.location.href = '/';
  };

  const handleCancelReset = () => {
    setShowResetConfirm(false);
  };

  const handleShowCameraHelp = async () => {
    // „Ç´„É°„É©Ê®©Èôê„ÅÆÁä∂ÊÖã„ÇíÁ¢∫Ë™ç
    try {
      if (navigator.permissions && navigator.permissions.query) {
        const result = await navigator.permissions.query({ name: 'camera' as PermissionName });
        setCameraPermission(result.state as 'granted' | 'denied' | 'prompt');
      } else {
        setCameraPermission('unknown');
      }
    } catch {
      setCameraPermission('unknown');
    }
    setShowCameraHelp(true);
  };

  const handleCloseCameraHelp = () => {
    setShowCameraHelp(false);
  };

  const handleRequestCamera = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: true });
      // Ê®©ÈôêÂèñÂæóÊàêÂäü
      stream.getTracks().forEach(track => track.stop());
      setCameraPermission('granted');
      alert('„Ç´„É°„É©„ÅÆ‰ΩøÁî®„ÅåË®±ÂèØ„Åï„Çå„Åæ„Åó„ÅüÔºÅ');
    } catch (error) {
      if (error instanceof Error) {
        if (error.name === 'NotAllowedError') {
          setCameraPermission('denied');
          alert('„Ç´„É°„É©„ÅÆ‰ΩøÁî®„ÅåÊãíÂê¶„Åï„Çå„Åæ„Åó„Åü„ÄÇ„Éñ„É©„Ç¶„Ç∂„ÅÆË®≠ÂÆö„Åã„ÇâË®±ÂèØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
        }
      }
    }
  };
  
  useEffect(() => {
    const container = mapContainerRef.current;
    
    if (container) {
      const scrollX = (container.scrollWidth - container.clientWidth) / 2;
      const scrollY = (container.scrollHeight - container.clientHeight) / 2;
      
      container.scrollTo({
        left: scrollX,
        top: scrollY,
        behavior: 'smooth' 
      });
    }
  }, []);

  return (
    <div className={styles.pageContainer}>
      <Header />

      <div className={styles.contentArea}>
        <h1>‰ºöÂ†¥ÊÉÖÂ†±</h1>
        
        <h2>‰ºöÂ†¥„Éû„ÉÉ„Éó</h2>
        <div className={styles.mapContainer} ref={mapContainerRef}>
          <button
            type="button"
            aria-label="‰ºöÂ†¥„Éû„ÉÉ„Éó„ÇíÊã°Â§ß"
            className={styles.imageWrapper}
            onClick={handleMapClick}
          >
            <img
              src={mapImage}
              alt="‰ºöÂ†¥„Éû„ÉÉ„Éó"
              className={styles.mapImage}
            />
          </button>
        </div>

        <h2>„Éó„É≠„Ç∞„É©„É†</h2>
        <div className={styles.mapContainer}>
          <button
            type="button"
            aria-label="„Éó„É≠„Ç∞„É©„É†„ÇíÊã°Â§ß"
            className={styles.imageWrapper}
            onClick={handleProgramClick}
          >
            <img
              src={ProgramImage}
              alt="„Éó„É≠„Ç∞„É©„É†"
              className={styles.mapImage}
            />
          </button>
        </div>

        <h2>„Åù„ÅÆ‰ªñ</h2>
        <div className={styles.settingsContainer}>
          <button
            type="button"
            className={styles.settingsButton}
            onClick={handleShowWalkthrough}
          >
            <span className={styles.settingsIcon}>üí°</span>
            <div className={styles.settingsContent}>
              <h3 className={styles.settingsTitle}>‰Ωø„ÅÑÊñπ„Ç¨„Ç§„Éâ</h3>
              <p className={styles.settingsDescription}>
                „Ç¢„Éó„É™„ÅÆ‰Ωø„ÅÑÊñπ„Çí„ÇÇ„ÅÜ‰∏ÄÂ∫¶Á¢∫Ë™ç„Åô„Çã
              </p>
            </div>
            <span className={styles.settingsArrow}>‚Ä∫</span>
          </button>

          <button
            type="button"
            className={styles.settingsButton}
            onClick={handleShowCameraHelp}
          >
            <span className={styles.settingsIcon}>üì∑</span>
            <div className={styles.settingsContent}>
              <h3 className={styles.settingsTitle}>„Ç´„É°„É©Ë®≠ÂÆö</h3>
              <p className={styles.settingsDescription}>
                „Ç´„É°„É©„ÅÆ‰ΩøÁî®Ë®±ÂèØ„ÇíÁ¢∫Ë™ç„ÉªË®≠ÂÆö„Åô„Çã
              </p>
            </div>
            <span className={styles.settingsArrow}>‚Ä∫</span>
          </button>

          <button
            type="button"
            className={`${styles.settingsButton} ${styles.dangerButton}`}
            onClick={handleResetData}
          >
            <span className={styles.settingsIcon}>üóëÔ∏è</span>
            <div className={styles.settingsContent}>
              <h3 className={styles.settingsTitle}>„Éá„Éº„Çø„É™„Çª„ÉÉ„Éà</h3>
              <p className={styles.settingsDescription}>
                ÂÖ®„Å¶„ÅÆ„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Å¶ÊúÄÂàù„Åã„Çâ„ÇÑ„ÇäÁõ¥„Åô
              </p>
            </div>
            <span className={styles.settingsArrow}>‚Ä∫</span>
          </button>
        </div>
      </div>
      
      {isMapZoomed && (
        <ZoomedMapOverlay 
          imageSrc={mapImage} 
          imageAlt="Êã°Â§ß‰ºöÂ†¥„Éû„ÉÉ„Éó" 
          onClose={handleCloseZoom} 
        />
      )}
      
      {isProgramZoomed && (
        <ZoomedMapOverlay 
          imageSrc={ProgramImage} 
          imageAlt="Êã°Â§ß„Éó„É≠„Ç∞„É©„É†" 
          onClose={handleCloseZoom} 
        />
      )}

      {showCameraHelp && (
        <div className={styles.confirmOverlay}>
          <div className={styles.confirmDialog}>
            <h2 className={styles.cameraHelpTitle}>üì∑ „Ç´„É°„É©Ë®≠ÂÆö</h2>
            
            <div className={styles.cameraStatus}>
              <p className={styles.statusLabel}>ÁèæÂú®„ÅÆÁä∂ÊÖãÔºö</p>
              {cameraPermission === 'granted' && (
                <span className={styles.statusGranted}>‚úÖ Ë®±ÂèØ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô</span>
              )}
              {cameraPermission === 'denied' && (
                <span className={styles.statusDenied}>‚ùå ÊãíÂê¶„Åï„Çå„Å¶„ÅÑ„Åæ„Åô</span>
              )}
              {cameraPermission === 'prompt' && (
                <span className={styles.statusPrompt}>‚è∏Ô∏è Êú™Ë®≠ÂÆö</span>
              )}
              {cameraPermission === 'unknown' && (
                <span className={styles.statusUnknown}>‚ùì Á¢∫Ë™ç„Åß„Åç„Åæ„Åõ„Çì</span>
              )}
            </div>

            <div className={styles.cameraHelpContent}>
              <h3>„Ç´„É°„É©„Åå‰Ωø„Åà„Å™„ÅÑÂ†¥Âêà</h3>
              
              <div className={styles.helpSection}>
                <h4>üì± „Çπ„Éû„Éº„Éà„Éï„Ç©„É≥„ÅÆÂ†¥Âêà</h4>
                <ol>
                  <li>„Éñ„É©„Ç¶„Ç∂„ÅÆ„Ç¢„Éâ„É¨„Çπ„Éê„Éº„Å´„ÅÇ„Çãüîí„Çí„Çø„ÉÉ„Éó</li>
                  <li>„Äå„Ç´„É°„É©„Äç„Çí„ÄåË®±ÂèØ„Äç„Å´Â§âÊõ¥</li>
                  <li>„Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø</li>
                </ol>
              </div>

              <div className={styles.helpSection}>
                <h4>üíª „Éë„ÇΩ„Ç≥„É≥„ÅÆÂ†¥Âêà</h4>
                <ol>
                  <li>„Éñ„É©„Ç¶„Ç∂„ÅÆ„Ç¢„Éâ„É¨„Çπ„Éê„ÉºÂ∑¶ÂÅ¥„ÅÆ„Ç¢„Ç§„Ç≥„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ</li>
                  <li>„Äå„Ç´„É°„É©„Äç„ÅÆË®≠ÂÆö„Çí„ÄåË®±ÂèØ„Äç„Å´Â§âÊõ¥</li>
                  <li>„Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø</li>
                </ol>
              </div>
            </div>

            <div className={styles.confirmButtons}>
              {(cameraPermission === 'prompt' || cameraPermission === 'unknown') && (
                <button
                  type="button"
                  className={styles.resetButton}
                  onClick={handleRequestCamera}
                >
                  „Ç´„É°„É©„ÇíË®±ÂèØ„Åô„Çã
                </button>
              )}
              <button
                type="button"
                className={styles.cancelButton}
                onClick={handleCloseCameraHelp}
              >
                Èñâ„Åò„Çã
              </button>
            </div>
          </div>
        </div>
      )}

      {showResetConfirm && (
        <div className={styles.confirmOverlay}>
          <div className={styles.confirmDialog}>
            <h2 className={styles.confirmTitle}>„Éá„Éº„Çø„Çí„É™„Çª„ÉÉ„Éà„Åó„Åæ„Åô„ÅãÔºü</h2>
            <p className={styles.confirmMessage}>
              „Åì„ÅÆÊìç‰Ωú„ÇíÂÆüË°å„Åô„Çã„Å®„ÄÅ‰ª•‰∏ã„ÅÆ„Éá„Éº„Çø„ÅåÂÖ®„Å¶ÂâäÈô§„Åï„Çå„Åæ„ÅôÔºö
            </p>
            <ul className={styles.confirmList}>
              <li>Áç≤Âæó„Åó„Åü„Çπ„Çø„É≥„Éó</li>
              <li>„É¶„Éº„Ç∂„ÉºID</li>
              <li>„Ç¶„Ç©„Éº„ÇØ„Çπ„É´„ÉºË°®Á§∫Áä∂ÊÖã</li>
              <li>„Åù„ÅÆ‰ªñ„ÅÆ‰øùÂ≠ò„Éá„Éº„Çø</li>
            </ul>
            <p className={styles.confirmWarning}>
              ‚ö†Ô∏è „Åì„ÅÆÊìç‰Ωú„ÅØÂèñ„ÇäÊ∂à„Åõ„Åæ„Åõ„Çì
            </p>
            <div className={styles.confirmButtons}>
              <button
                type="button"
                className={styles.cancelButton}
                onClick={handleCancelReset}
              >
                „Ç≠„É£„É≥„Çª„É´
              </button>
              <button
                type="button"
                className={styles.resetButton}
                onClick={handleConfirmReset}
              >
                „É™„Çª„ÉÉ„Éà„Åô„Çã
              </button>
            </div>
          </div>
        </div>
      )}

      <FooterNav homePath="/stamps" cameraPath="/scan" mapPath="/map" />
    </div>
  );
};

export default MapPage;
